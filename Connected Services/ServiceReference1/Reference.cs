//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Complex", Namespace="http://schemas.datacontract.org/2004/07/Lab1Wcf")]
    public partial class Complex : object
    {
        
        private double ImagField;
        
        private double RealField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Imag
        {
            get
            {
                return this.ImagField;
            }
            set
            {
                this.ImagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Real
        {
            get
            {
                return this.RealField;
            }
            set
            {
                this.RealField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IComplexCalculator")]
    public interface IComplexCalculator
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/AddComplexData", ReplyAction="http://tempuri.org/IComplexCalculator/AddComplexDataResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Complex> AddComplexDataAsync(ServiceReference1.Complex a, ServiceReference1.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/AddDoubleData", ReplyAction="http://tempuri.org/IComplexCalculator/AddDoubleDataResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Complex> AddDoubleDataAsync(double ar, double ai, double br, double bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/SubstractComplexData", ReplyAction="http://tempuri.org/IComplexCalculator/SubstractComplexDataResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Complex> SubstractComplexDataAsync(ServiceReference1.Complex a, ServiceReference1.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/SubstractDoubleData", ReplyAction="http://tempuri.org/IComplexCalculator/SubstractDoubleDataResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Complex> SubstractDoubleDataAsync(double ar, double ai, double br, double bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/DivideComplexData", ReplyAction="http://tempuri.org/IComplexCalculator/DivideComplexDataResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Complex> DivideComplexDataAsync(ServiceReference1.Complex a, ServiceReference1.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/DivideDoubleData", ReplyAction="http://tempuri.org/IComplexCalculator/DivideDoubleDataResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Complex> DivideDoubleDataAsync(double ar, double ai, double br, double bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/MultiplyComplexData", ReplyAction="http://tempuri.org/IComplexCalculator/MultiplyComplexDataResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Complex> MultiplyComplexDataAsync(ServiceReference1.Complex a, ServiceReference1.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/MultiplyDoubleData", ReplyAction="http://tempuri.org/IComplexCalculator/MultiplyDoubleDataResponse")]
        System.Threading.Tasks.Task<ServiceReference1.Complex> MultiplyDoubleDataAsync(double ar, double ai, double br, double bi);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IComplexCalculatorChannel : ServiceReference1.IComplexCalculator, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ComplexCalculatorClient : System.ServiceModel.ClientBase<ServiceReference1.IComplexCalculator>, ServiceReference1.IComplexCalculator
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ComplexCalculatorClient() : 
                base(ComplexCalculatorClient.GetDefaultBinding(), ComplexCalculatorClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IComplexCalculator.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ComplexCalculatorClient(EndpointConfiguration endpointConfiguration) : 
                base(ComplexCalculatorClient.GetBindingForEndpoint(endpointConfiguration), ComplexCalculatorClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ComplexCalculatorClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ComplexCalculatorClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ComplexCalculatorClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ComplexCalculatorClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ComplexCalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Complex> AddComplexDataAsync(ServiceReference1.Complex a, ServiceReference1.Complex b)
        {
            return base.Channel.AddComplexDataAsync(a, b);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Complex> AddDoubleDataAsync(double ar, double ai, double br, double bi)
        {
            return base.Channel.AddDoubleDataAsync(ar, ai, br, bi);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Complex> SubstractComplexDataAsync(ServiceReference1.Complex a, ServiceReference1.Complex b)
        {
            return base.Channel.SubstractComplexDataAsync(a, b);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Complex> SubstractDoubleDataAsync(double ar, double ai, double br, double bi)
        {
            return base.Channel.SubstractDoubleDataAsync(ar, ai, br, bi);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Complex> DivideComplexDataAsync(ServiceReference1.Complex a, ServiceReference1.Complex b)
        {
            return base.Channel.DivideComplexDataAsync(a, b);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Complex> DivideDoubleDataAsync(double ar, double ai, double br, double bi)
        {
            return base.Channel.DivideDoubleDataAsync(ar, ai, br, bi);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Complex> MultiplyComplexDataAsync(ServiceReference1.Complex a, ServiceReference1.Complex b)
        {
            return base.Channel.MultiplyComplexDataAsync(a, b);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.Complex> MultiplyDoubleDataAsync(double ar, double ai, double br, double bi)
        {
            return base.Channel.MultiplyDoubleDataAsync(ar, ai, br, bi);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IComplexCalculator))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IComplexCalculator))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:55597/ComplexCalculator.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ComplexCalculatorClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IComplexCalculator);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ComplexCalculatorClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IComplexCalculator);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IComplexCalculator,
        }
    }
}
