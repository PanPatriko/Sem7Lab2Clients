//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab2WpfClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Complex", Namespace="http://schemas.datacontract.org/2004/07/Lab1Wcf")]
    [System.SerializableAttribute()]
    public partial class Complex : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ImagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RealField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Imag {
            get {
                return this.ImagField;
            }
            set {
                if ((this.ImagField.Equals(value) != true)) {
                    this.ImagField = value;
                    this.RaisePropertyChanged("Imag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Real {
            get {
                return this.RealField;
            }
            set {
                if ((this.RealField.Equals(value) != true)) {
                    this.RealField = value;
                    this.RaisePropertyChanged("Real");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IComplexCalculator")]
    public interface IComplexCalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/AddComplexData", ReplyAction="http://tempuri.org/IComplexCalculator/AddComplexDataResponse")]
        Lab2WpfClient.ServiceReference1.Complex AddComplexData(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/AddComplexData", ReplyAction="http://tempuri.org/IComplexCalculator/AddComplexDataResponse")]
        System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> AddComplexDataAsync(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/AddDoubleData", ReplyAction="http://tempuri.org/IComplexCalculator/AddDoubleDataResponse")]
        Lab2WpfClient.ServiceReference1.Complex AddDoubleData(double ar, double ai, double br, double bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/AddDoubleData", ReplyAction="http://tempuri.org/IComplexCalculator/AddDoubleDataResponse")]
        System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> AddDoubleDataAsync(double ar, double ai, double br, double bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/SubstractComplexData", ReplyAction="http://tempuri.org/IComplexCalculator/SubstractComplexDataResponse")]
        Lab2WpfClient.ServiceReference1.Complex SubstractComplexData(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/SubstractComplexData", ReplyAction="http://tempuri.org/IComplexCalculator/SubstractComplexDataResponse")]
        System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> SubstractComplexDataAsync(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/SubstractDoubleData", ReplyAction="http://tempuri.org/IComplexCalculator/SubstractDoubleDataResponse")]
        Lab2WpfClient.ServiceReference1.Complex SubstractDoubleData(double ar, double ai, double br, double bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/SubstractDoubleData", ReplyAction="http://tempuri.org/IComplexCalculator/SubstractDoubleDataResponse")]
        System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> SubstractDoubleDataAsync(double ar, double ai, double br, double bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/DivideComplexData", ReplyAction="http://tempuri.org/IComplexCalculator/DivideComplexDataResponse")]
        Lab2WpfClient.ServiceReference1.Complex DivideComplexData(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/DivideComplexData", ReplyAction="http://tempuri.org/IComplexCalculator/DivideComplexDataResponse")]
        System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> DivideComplexDataAsync(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/DivideDoubleData", ReplyAction="http://tempuri.org/IComplexCalculator/DivideDoubleDataResponse")]
        Lab2WpfClient.ServiceReference1.Complex DivideDoubleData(double ar, double ai, double br, double bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/DivideDoubleData", ReplyAction="http://tempuri.org/IComplexCalculator/DivideDoubleDataResponse")]
        System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> DivideDoubleDataAsync(double ar, double ai, double br, double bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/MultiplyComplexData", ReplyAction="http://tempuri.org/IComplexCalculator/MultiplyComplexDataResponse")]
        Lab2WpfClient.ServiceReference1.Complex MultiplyComplexData(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/MultiplyComplexData", ReplyAction="http://tempuri.org/IComplexCalculator/MultiplyComplexDataResponse")]
        System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> MultiplyComplexDataAsync(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/MultiplyDoubleData", ReplyAction="http://tempuri.org/IComplexCalculator/MultiplyDoubleDataResponse")]
        Lab2WpfClient.ServiceReference1.Complex MultiplyDoubleData(double ar, double ai, double br, double bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComplexCalculator/MultiplyDoubleData", ReplyAction="http://tempuri.org/IComplexCalculator/MultiplyDoubleDataResponse")]
        System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> MultiplyDoubleDataAsync(double ar, double ai, double br, double bi);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IComplexCalculatorChannel : Lab2WpfClient.ServiceReference1.IComplexCalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ComplexCalculatorClient : System.ServiceModel.ClientBase<Lab2WpfClient.ServiceReference1.IComplexCalculator>, Lab2WpfClient.ServiceReference1.IComplexCalculator {
        
        public ComplexCalculatorClient() {
        }
        
        public ComplexCalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ComplexCalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ComplexCalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ComplexCalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Lab2WpfClient.ServiceReference1.Complex AddComplexData(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b) {
            return base.Channel.AddComplexData(a, b);
        }
        
        public System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> AddComplexDataAsync(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b) {
            return base.Channel.AddComplexDataAsync(a, b);
        }
        
        public Lab2WpfClient.ServiceReference1.Complex AddDoubleData(double ar, double ai, double br, double bi) {
            return base.Channel.AddDoubleData(ar, ai, br, bi);
        }
        
        public System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> AddDoubleDataAsync(double ar, double ai, double br, double bi) {
            return base.Channel.AddDoubleDataAsync(ar, ai, br, bi);
        }
        
        public Lab2WpfClient.ServiceReference1.Complex SubstractComplexData(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b) {
            return base.Channel.SubstractComplexData(a, b);
        }
        
        public System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> SubstractComplexDataAsync(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b) {
            return base.Channel.SubstractComplexDataAsync(a, b);
        }
        
        public Lab2WpfClient.ServiceReference1.Complex SubstractDoubleData(double ar, double ai, double br, double bi) {
            return base.Channel.SubstractDoubleData(ar, ai, br, bi);
        }
        
        public System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> SubstractDoubleDataAsync(double ar, double ai, double br, double bi) {
            return base.Channel.SubstractDoubleDataAsync(ar, ai, br, bi);
        }
        
        public Lab2WpfClient.ServiceReference1.Complex DivideComplexData(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b) {
            return base.Channel.DivideComplexData(a, b);
        }
        
        public System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> DivideComplexDataAsync(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b) {
            return base.Channel.DivideComplexDataAsync(a, b);
        }
        
        public Lab2WpfClient.ServiceReference1.Complex DivideDoubleData(double ar, double ai, double br, double bi) {
            return base.Channel.DivideDoubleData(ar, ai, br, bi);
        }
        
        public System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> DivideDoubleDataAsync(double ar, double ai, double br, double bi) {
            return base.Channel.DivideDoubleDataAsync(ar, ai, br, bi);
        }
        
        public Lab2WpfClient.ServiceReference1.Complex MultiplyComplexData(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b) {
            return base.Channel.MultiplyComplexData(a, b);
        }
        
        public System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> MultiplyComplexDataAsync(Lab2WpfClient.ServiceReference1.Complex a, Lab2WpfClient.ServiceReference1.Complex b) {
            return base.Channel.MultiplyComplexDataAsync(a, b);
        }
        
        public Lab2WpfClient.ServiceReference1.Complex MultiplyDoubleData(double ar, double ai, double br, double bi) {
            return base.Channel.MultiplyDoubleData(ar, ai, br, bi);
        }
        
        public System.Threading.Tasks.Task<Lab2WpfClient.ServiceReference1.Complex> MultiplyDoubleDataAsync(double ar, double ai, double br, double bi) {
            return base.Channel.MultiplyDoubleDataAsync(ar, ai, br, bi);
        }
    }
}
